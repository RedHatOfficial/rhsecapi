#!/usr/bin/python2
# -*- coding: utf-8 -*-
# PYTHON_ARGCOMPLETE_OK
#-------------------------------------------------------------------------------
# Copyright 2016 Ryan Sawhill Aroha <rsaw@redhat.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#-------------------------------------------------------------------------------

# Modules from standard library
from __future__ import print_function
import requests
import json
import argparse
from sys import stdin, stderr, exit
try:
    import argcomplete
    haveArgcomplete = True
except:
    print("Missing optional python module: argcomplete\n"
          "Install it to enable bash auto-magic tab-completion:\n"
          "  yum/dnf install python-pip; pip install argcomplete\n"
          "  activate-global-python-argcomplete; (Then restart shell)\n", file=stderr)
    haveArgcomplete = False

prog = 'rhsecapi'
vers = {}
vers['version'] = '0.1.1'
vers['date'] = '2016/10/17'
rhApiUrl = 'https://access.redhat.com/labs/securitydataapi'
defaultFields = "threat_severity,bugzilla,affected_release,package_state"


def fpaste(inputdata, lang='text', paste_user=None, paste_password=None, paste_private='yes', paste_expire=2419200, paste_project=None, url='http://paste.fedoraproject.org'):
    p = {
        'paste_data': inputdata,
        'paste_lang': lang,
        'api_submit': 'true',
        'mode': 'json',
        'paste_private': paste_private,
        'paste_expire': str(paste_expire),
        }
    if paste_user:
        p['paste_user'] = paste_user
    if paste_password:
        p['paste_password'] = paste_password
    if paste_project:
        p['paste_project'] = paste_project
    req = requests.post(url, p)
    if req.status_code == 200:
        j = req.json()
        if j.has_key('error'):
            print(json.dumps(j, sort_keys=True, indent=2))
            exit(1)
        pasteUrl = '{0}/{1}'.format(url, j['result']['id'])
        if 'yes' in paste_private and j['result'].has_key('hash'):
            pasteUrl += '/{0}'.format(j['result']['hash'])
        print(pasteUrl)
    else:
        print("HTTP error {0} connecting to {1}".format(req.status_code, url), file=stderr)
        exit(1)


class CustomFormatter(argparse.RawDescriptionHelpFormatter):
    """This custom formatter eliminates the duplicate metavar in help lines."""

    def _format_action_invocation(self, action):
        if not action.option_strings:
            metavar, = self._metavar_formatter(action, action.dest)(1)
            return metavar
        else:
            parts = []
            if action.nargs == 0:
                parts.extend(action.option_strings)
            else:
                default = action.dest.upper()
                args_string = self._format_args(action, default)
                for option_string in action.option_strings:
                    parts.append('%s' % option_string)
                parts[-1] += ' %s'%args_string
            return ', '.join(parts)


def parse_args():
    """Parse argv into usable input."""
    description = ("Make queries against the Red Hat Security Data API\n"
                   "Original announcement: https://access.redhat.com/blogs/766093/posts/2387601\n"
                   "Docs: https://access.redhat.com/documentation/en/red-hat-security-data-api/\n")
    version = "{} v{} last mod {}".format(prog, vers['version'], vers['date'])
    epilog = (
        "VERSION:\n"
        "  {0}\n"
        "  See <http://github.com/ryran/redhat-security-data-api> to report bugs or RFEs").format(version)
    fmt = lambda prog: CustomFormatter(prog)
    p = argparse.ArgumentParser(
        prog=prog,
        description=description,
        add_help=False,
        epilog=epilog,
        formatter_class=fmt)
    # Add args
    g0 = p.add_argument_group(
        'PERFORM GENERAL SEARCH QUERY',
        description="Initiate a single search query and print JSON results")
    g0.add_argument(
        '--severity', choices=['low', 'moderate', 'important', 'critical'],
        help="Narrow down results by severity rating (impact)")
    g0.add_argument(
        '--bugzilla', metavar='BUGID',
        help="Narrow down results by Bugzilla ID")
    g0.add_argument(
        '--cwe', metavar='NNN',
        help="Narrow down results by CWE ID")
    g0.add_argument(
        '--cvss_score', metavar='SCORE',
        help="Narrow down results by CVSS base score (e.g.: '8.0')")
    g0.add_argument(
        '--cvss3_score', metavar='SCORE',
        help="Narrow down results by CVSSv3 base score (e.g.: '5.1')")
    g0.add_argument(
        '--package', metavar='PKG',
        help="Narrow down results by package name")
    g0.add_argument(
        '--before', metavar='YEAR-MM-DD',
        help="Narrow down results to before a certain time period")
    g0.add_argument(
        '--after', metavar='YEAR-MM-DD',
        help="Narrow down results to after a certain time period")
    g0.add_argument(
        '--advisory', metavar='RHXA-YEAR:NNNN',
        help="Narrow down results by errata advisory (e.g.: 'RHSA-2016:1422' or 'RHEA-2016:1155')")
    g0.add_argument(
        '--rawquery',
        help="Narrow down results by RAWQUERY (e.g.: 'a=b' or 'e=f&x=y'")
    g00 = p.add_argument_group(
        'PERFORM CVE QUERIES',
        description="Search by CVE in addition to or instead above search query")
    g00.add_argument('cves', metavar='CVE', nargs='*',
        help="Query a CVE or space-separated list of CVEs (e.g.: 'CVE-2016-5387')")
    g00.add_argument(
        '-x', '--extract-search', action='store_true',
        help="Determine what CVEs to query by extracting them from general search query as initiated by at least one of the GENERAL SEARCH QUERY options (suppresses usual JSON result of search query)")
    g1 = p.add_argument_group(
        'CVE QUERY DISPLAY OPTIONS')
    gg1 = g1.add_mutually_exclusive_group()
    gg1.add_argument(
        '--fields', default=defaultFields,
        help="Comma-separated fields to be displayed (default: {0})".format(defaultFields))
    gg1.add_argument(
        '-a', '--all', dest='extractAllFields', action='store_true',
        help="Print all supported fields (currently: threat_severity, public_date, cwe, cvss, cvss3, bugzilla, acknowledgement, details, statement, affected_release, package_state)")
    gg1.add_argument(
        '-j', '--json', action='store_true',
        help="Print full JSON output; note that this option cannot be used with '--fields' or '--all'")
    g1.add_argument(
        '-u', '--urls', dest='printUrls', action='store_true',
        help="Print URLs for all relevant fields")
    g2 = p.add_argument_group(
        'GENERAL OPTIONS')
    g2.add_argument(
        '-p', '--paste', action='store_true',
        help="Send output to Fedora Project Pastebin (paste.fedoraproject.org) and print only URL to stdout")
    g2.add_argument(
        '--paste_lang', metavar='LANG', default='text',
        choices=['ABAP', 'Actionscript', 'ADA', 'Apache Log', 'AppleScript', 'APT sources.list', 'ASM (m68k)', 'ASM (pic16)', 'ASM (x86)', 'ASM (z80)', 'ASP', 'AutoIT', 'Backus-Naur form', 'Bash', 'Basic4GL', 'BlitzBasic', 'Brainfuck', 'C', 'C for Macs', 'C#', 'C++', 'C++ (with QT)', 'CAD DCL', 'CadLisp', 'CFDG', 'CIL / MSIL', 'COBOL', 'ColdFusion', 'CSS', 'D', 'Delphi', 'Diff File Format', 'DIV', 'DOS', 'DOT language', 'Eiffel', 'Fortran', "FourJ's Genero", 'FreeBasic', 'GetText', 'glSlang', 'GML', 'gnuplot', 'Groovy', 'Haskell', 'HQ9+', 'HTML', 'INI (Config Files)', 'Inno', 'INTERCAL', 'IO', 'Java', 'Java 5', 'Javascript', 'KiXtart', 'KLone C & C++', 'LaTeX', 'Lisp', 'LOLcode', 'LotusScript', 'LScript', 'Lua', 'Make', 'mIRC', 'MXML', 'MySQL', 'NSIS', 'Objective C', 'OCaml', 'OpenOffice BASIC', 'Oracle 8 & 11 SQL', 'Pascal', 'Perl', 'PHP', 'Pixel Bender', 'PL/SQL', 'POV-Ray', 'PowerShell', 'Progress (OpenEdge ABL)', 'Prolog', 'ProvideX', 'Python', 'Q(uick)BASIC', 'robots.txt', 'Ruby', 'Ruby on Rails', 'SAS', 'Scala', 'Scheme', 'Scilab', 'SDLBasic', 'Smalltalk', 'Smarty', 'SQL', 'T-SQL', 'TCL', 'thinBasic', 'TypoScript', 'Uno IDL', 'VB.NET', 'Verilog', 'VHDL', 'VIM Script', 'Visual BASIC', 'Visual Fox Pro', 'Visual Prolog', 'Whitespace', 'Winbatch', 'Windows Registry Files', 'X++', 'XML', 'Xorg.conf'],
        help="Set the development language for the paste (default: 'text')")
    g2.add_argument(
        '--paste_user', metavar='NAME',
        help="Set alphanumeric paste author")
    g2.add_argument(
        '--paste_password', metavar='PASSWD',
        help="Set password string to protect paste")
    g2.add_argument(
        '--paste_public', dest='paste_private', default='yes', action='store_const', const='no',
        help="Set paste to be publicly-discoverable")
    g2.add_argument(
        '--paste_expire', metavar='SECS', default=2419200, type=int,
        help="Set time in seconds after which paste will be deleted (default: '2419200', i.e., 28 days; set to '0' to disable expiration)")
    g2.add_argument(
        '--paste_project', metavar='PROJECT',
        help="Associate paste with a project")
    g2.add_argument(
        '--apiurl', default=rhApiUrl,
        help="Set Security Data API URL (default: {0})".format(rhApiUrl))
    g2.add_argument(
        '-h', '--help', dest='showHelp', action='store_true',
        help="Show this help message and exit")
    o = p.parse_args()
    # Parse and return
    if haveArgcomplete:
        argcomplete.autocomplete(p)
    o.searchQuery = ""
    if o.severity:
        o.searchQuery += "&severity={0}".format(o.severity)
    if o.bugzilla:
        o.searchQuery += "&bug={0}".format(o.bugzilla)
    if o.cwe:
        o.searchQuery += "&cwe={0}".format(o.cwe)
    if o.cvss_score:
        o.searchQuery += "&cvss_score={0}".format(o.cvss_score)
    if o.cvss3_score:
        o.searchQuery += "&cvss3_score={0}".format(o.cvss3_score)
    if o.package:
        o.searchQuery += "&package={0}".format(o.package)
    if o.before:
        o.searchQuery += "&before={0}".format(o.before)
    if o.after:
        o.searchQuery += "&after={0}".format(o.after)
    if o.advisory:
        o.searchQuery += "&advisory={0}".format(o.advisory)
    if o.rawquery:
        o.searchQuery += o.rawquery
    if o.showHelp or not (len(o.searchQuery) or o.cves):
        p.print_help()
        exit()
    return o


class RedHatSecDataApi:
    """."""

    def __init__(self, extractAllFields=False, fields=defaultFields, printUrls=False, json=False, paste=False, apiurl=rhApiUrl):
        self.extractAllFields = extractAllFields
        try:
            if len(fields):
                self.desiredFields = fields.split(",")
            else:
                self.desiredFields = []
        except:
            print("Error parsing fields\n")
            raise
        self.printUrls = printUrls
        self.json = json
        self.apiurl = apiurl
        self.output = ""
        if paste:
            self.Print = self.paste_printer
        else:
            self.Print = self.print_printer

    def paste_printer(self, text):
        self.output += text

    def print_printer(self, text):
        print(text, end="")

    def check_field(self, field, jsoninput):
        if (self.extractAllFields or field in self.desiredFields) and jsoninput.has_key(field):
            return True
        return False

    def search_query(self, querystring, returnData=False):
        url = "{0}/cve.json?{1}".format(self.apiurl, querystring)
        if not returnData:
            self.Print("Search query: '{0}' ...\n".format(url))
        req = requests.get(url)
        if req.status_code == 200:
            if returnData:
                return req.json()
            self.Print(json.dumps(req.json(), sort_keys=True, indent=2))
        else:
            self.Print("[]\n")
        self.Print("\n")

    def stripjoin(self, input):
        text = ""
        if isinstance(input, list):
            for i in input:
                text += i.strip()
                text += " "
        else:
            text = input.strip()
        return text

    def query_cve(self, cve):
        req = requests.get("{0}/cve/{1}.json".format(self.apiurl, cve))
        if req.status_code == 200:
            j = req.json()
            if self.json:
                self.Print(json.dumps(j, sort_keys=True, indent=2))
            else:
                name = ""
                if cve != j['name']:
                    name = " [{0}]".format(j['name'])
                url = ""
                if self.printUrls:
                    url = " (https://access.redhat.com/security/cve/{0})".format(cve)
                self.Print("{0}{1}{2}\n".format(cve, name, url))
                if not self.desiredFields:
                    return
                if self.check_field('threat_severity', j):
                    url = ""
                    if self.printUrls:
                        url = " (https://access.redhat.com/security/updates/classification)"
                    self.Print("  IMPACT:  {0}{1}\n".format(j['threat_severity'], url))
                if self.check_field('public_date', j):
                    self.Print("  PUBLIC_DATE:  {0}\n".format(j['public_date']))
                if self.check_field('cwe', j):
                    url = ""
                    if self.printUrls:
                        url = " (http://cwe.mitre.org/data/definitions/{0}.html)".format(j['cwe'].lstrip("CWE-"))
                    self.Print("  CWE:  {0}{1}\n".format(j['cwe'], url))
                if self.check_field('cvss', j):
                    cvss_scoring_vector = j['cvss']['cvss_scoring_vector']
                    if self.printUrls:
                        cvss_scoring_vector = "http://nvd.nist.gov/cvss.cfm?version=2&vector=({0})".format(cvss_scoring_vector)
                    self.Print("  CVSS:  {0} [{1}]\n".format(j['cvss']['cvss_base_score'], cvss_scoring_vector))
                if self.check_field('cvss3', j):
                    cvss3_scoring_vector = j['cvss3']['cvss3_scoring_vector']
                    if self.printUrls:
                        cvss3_scoring_vector = "https://www.first.org/cvss/calculator/3.0#{0}".format(cvss3_scoring_vector)
                    self.Print("  CVSS3:  {0} [{1}]\n".format(j['cvss3']['cvss3_base_score'], cvss3_scoring_vector))
                if 'bugzilla' in self.desiredFields:
                    if j.has_key('bugzilla'):
                        bug = j['bugzilla']['id']
                        if self.printUrls:
                            bug = j['bugzilla']['url']
                        self.Print("  BUGZILLA:  {0}\n".format(bug))
                    else:
                        self.Print("  BUGZILLA:  No Bugzilla data\n")
                        self.Print("   Too new or too old? See: https://bugzilla.redhat.com/show_bug.cgi?id=CVE_legacy\n")
                if self.check_field('acknowledgement', j):
                    self.Print("  ACKNOWLEDGEMENT:  {0}\n".format(j['acknowledgement'].strip()))
                if self.check_field('details', j):
                    self.Print("  DETAILS:  {0}\n".format(self.stripjoin(j['details'])))
                if self.check_field('statement', j):
                    self.Print("  STATEMENT:  {0}\n".format(self.stripjoin(j['statement'])))
                if self.check_field('affected_release', j):
                    self.Print("  AFFECTED_RELEASE (ERRATA)\n")
                    affected_release = j['affected_release']
                    if isinstance(affected_release, dict):
                        affected_release = [affected_release]
                    for release in affected_release:
                        package = ""
                        if release.has_key('package'):
                            package = " [{0}]".format(release['package'])
                        advisory = release['advisory']
                        if self.printUrls:
                            advisory = "https://access.redhat.com/errata/{0}".format(advisory)
                        self.Print("   {0}{1}: {2}\n".format(release['product_name'], package, advisory))
                if self.check_field('package_state', j):
                    self.Print("  PACKAGE_STATE\n")
                    package_state = j['package_state']
                    if isinstance(package_state, dict):
                        package_state = [package_state]
                    for state in package_state:
                        package_name = ""
                        if state.has_key('package_name'):
                            package_name = " [{0}]".format(state['package_name'])
                        self.Print("   {2}: {0}{1}\n".format(state['product_name'], package_name, state['fix_state']))
        else:
            self.Print("{0}\n Not present in Red Hat CVE database\n".format(cve))
            if cve.startswith("CVE-"):
                self.Print(" Try https://cve.mitre.org/cgi-bin/cvename.cgi?name={0}\n".format(cve))
        self.Print("\n")


def main(opts):
    a = RedHatSecDataApi(opts.extractAllFields, opts.fields, opts.printUrls, opts.json, opts.paste, opts.apiurl)
    if len(opts.searchQuery):
        if opts.extract_search:
            result = a.search_query(opts.searchQuery, returnData=True)
            if result:
                for i in result:
                    opts.cves.append(i['CVE'])
        else:
            a.search_query(opts.searchQuery)
    if opts.cves:
        for cve in opts.cves:
            a.query_cve(cve)
    if opts.paste:
        fpaste(a.output, opts.paste_lang, opts.paste_user, opts.paste_password, opts.paste_private, opts.paste_expire, opts.paste_project)


if __name__ == "__main__":
    try:
        opts = parse_args()
        main(opts)
    except KeyboardInterrupt:
        print("\nReceived KeyboardInterrupt. Exiting.")
        exit()
